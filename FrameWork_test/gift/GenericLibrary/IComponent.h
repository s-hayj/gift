//----------------------------------------------------------
// file name: IComponent.h
//
// memo: テンプレートコンポーネント制御用インターフェース
//----------------------------------------------------------

#ifndef	__ICOMPONENT_H
#define	__ICOMPONENT_H


namespace gift
{

//----------------------------------------------------------
// neme: gift::IComponent
//
// attrib: template interface
//
// memo: ジェネリックコンポーネントインターフェース
//----------------------------------------------------------
template<class T>
class	IComponent
{
public:
	virtual ~IComponent(void) {};

	//----------------------------------------------------------
	//	格納オブジェクトを転送
	//
	// parameter: (in)T& obj … 格納させるオブジェクトへの参照
	//----------------------------------------------------------
	virtual void Set(T& obj) = 0;

	//----------------------------------------------------------
	//	格納オブジェクトを取得
	//
	// return: T& … 格納オブジェクトへの参照
	//----------------------------------------------------------
	virtual T& Get(void) = 0;

	//----------------------------------------------------------
	//	次の連結先を、ID指定で取得
	//
	// paramter: (in)int id = 0 … 連結番号を指定する
	//
	// return: IComponent<T>* … 連結先のコンポーネント
	//
	// memo: 主に、子へのアクセスに利用する
	//----------------------------------------------------------
	virtual IComponent<T>* Next(int id = 0) = 0;

	//----------------------------------------------------------
	//	手前の連結先を取得する
	//
	// return: IComponent<T>* … 連結先のコンポーネント
	//
	// memo: 主に、親へのアクセスに利用する
	//----------------------------------------------------------
	virtual IComponent<T>* Back(void) = 0;

	//----------------------------------------------------------
	//	IDを指定して、コンポーネントを連結させる
	//
	// parameter: (in)IComponent<T>* pComponent … 連結させるコンポーネント
	// parameter: (in)int id = 0 … 識別用の番号
	//
	// return: bool … 連結処理結果
	//　　　　true … 連結に成功
	//
	// memo: 主に、子として連結させるときに利用する
	//----------------------------------------------------------
	virtual bool Connect(IComponent<T>* pComponent, int id = 0) = 0;

	//----------------------------------------------------------
	//	親としてコンポーネントを連結させる
	//
	// parameter: (in)IComponent<T>* pComponent … 連結させるコンポーネント
	//
	// return: bool … 連結処理結果
	//　　　　true … 連結に成功
	//----------------------------------------------------------
	virtual bool ConnectParent(IComponent<T>* pParent) = 0;
};

};//namespace gift

#endif
