//----------------------------------------------------------
//	@file	Game.h
//
//	@memo	ゲームアプリケーションの構造管理クラス
//
//	@author	sano-y
//	@data	2008-05-13
//----------------------------------------------------------

#ifndef	__GAME_H
#define	__GAME_H

#include "factory/FrameWorkFactory.h"

//----------------------------------------------------------
//	@name	Game
//
//	@memo	ゲーム全体を形成する最上位オブジェクト
//
//	@attrib	public final class
//
//	@author	sano-y
//	@data	2008-05-13	unfinished
//----------------------------------------------------------
class	Game
{
private:
	FrameWork*	m_pFrameWork;	//	ゲームフレームワーク

public:
	//----------------------------------------------------------
	//	コンストラクタ
	//
	//	@name	Game::Game
	//
	//	@attrib	public
	//
	//	@param	none
	//----------------------------------------------------------
	Game(void);

	//----------------------------------------------------------
	//	デストラクタ
	//
	//	@attrib	public
	//
	//	@param	none
	//----------------------------------------------------------
	~Game(void);

	//----------------------------------------------------------
	//	ゲームフレームワークを作成する
	//
	//	@name	Game::CreateFrameWork
	//
	//	@memo	引数は参照のみで、破棄の責任まで委託していない
	//
	//	@attrib	public
	//
	//	@param	(in)pFrameFactory	フレームワーク生成オブジェクト
	//
	//	@return int	０以外	エラーフラグ
	//----------------------------------------------------------
	int CreateFrameWork( const FrameWorkFactory* pFrameFactory );

	//----------------------------------------------------------
	//	ゲームを開始する
	//
	//	@name	Game::Run
	//
	//	@memo	ゲーム処理が終了するまで戻ってこない
	//
	//	@attrib	public
	//
	//	@param	none
	//
	//	@return	int	０以外	エラーフラグ
	//----------------------------------------------------------
	int Run(void);

	//----------------------------------------------------------
	//	生成時に戻す
	//
	//	@name	Game::Release
	//
	//	@memo	デストラクタ時に一応呼び出される
	//
	//	@attrib	public
	//
	//	@param	none
	//
	//	@return	none
	//----------------------------------------------------------
	void Release(void);
};

#endif